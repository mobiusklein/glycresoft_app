<div class='row'>
    <h4 class='section-title'>Glycopeptide Search Space Building</h4>
</div>
<div class='row'>
    <form  id='glycopeptide-hypothesis-form' action="glycopeptide_search_space" method="post" class="col s12" accept-charset="utf-8" enctype="multipart/form-data">
        <div class="row">
            <div class="input-field col s8">
                <label for="hypothesis_name">Hypothesis Name</label>
                <br>
                <input id='hypothesis_name' name="hypothesis_name" type="text" class="validate" required>
            </div>
        </div>
        <div class='row'>
            <div class='col s6'>
                <div id='protein-list-file-container' class="file-field input-field">
                    <h6>Protein List</h6>
                    <div class="btn">
                        <span>Select File</span>
                        <input name='protein-list-file' id='protein-list-file' type="file"/>
                    </div>
                    <input class="file-path validate" type="text" style="width:70%;padding-left:5px;"/>
                    <input type='hidden' name='proteomics-file-type' id="proteomics-file-type" />
                </div>
            </div>
            <span class='col s5' id='protein-list-file-help'>
            A list of protein sequences to digest and glycosylate <em>in-silico</em>, provided in Fasta format or mzIdentML.
            </span>
        </div>
        <div id='mzid-protein-list-container'>
        </div>
        <div id='modification-selection-editor-container' class="row">
        </div>
        <div class='row'>
            <div class='col s4' id='enzyme-container'>
                <h6>Enzymatic Digest</h6>
            {% with select_name='enzyme' %}
                {% include 'components/peptidase_selection.templ' %}
            {% endwith %}
            <label for='missed_cleavages'>Missed Cleavages Allowed</label>
            <input class='validate numeric-entry' type='number' min="0" id='missed_cleavages'
                   name='missed_cleavages' value="2"/>
            <span class="advanced-enzyme-container-toggle right" data-state='closed' style='cursor: pointer;'>
                Advanced Options<span class='mdi mdi-chevron-down'></span></span>
            <div class='advanced-enzyme-container row clearfix' style="display: none;">
                <div class='row'>
                    <div class="col s6">
                        <div>
                            <input name="semispecific-digest" type="checkbox"
                                   id="semispecific-digest"/>
                            <label for='semispecific-digest'>Semi-Specific Digest</label>
                        </div>
                        <div class="tooltipped" data-tooltip="Ignores any protease selection">
                            <input name="non-specific-digest" type="checkbox"
                                   id="non-specific-digest"/>
                            <label for='non-specific-digest'>Non-Specific Digest</label>
                        </div>
                    </div>
                    <div class='col s6'>
                        <div class='input-field'>
                            <label for='custom-protease'>Custom Protease</label>
                            <input type='text' min="0" id='custom-protease'
                                   name='custom-protease' placeholder="Enter regular expression"/>
                        </div>
                    </div>
                </div>
                <div class='row'>
                    <div class="col s5">
                        <div class='input-field'>
                            <label for='peptide_min_length'>Minimum Length</label>
                            <input class='validate numeric-entry' type='number' min="0" id='peptide_min_length'
                                    name='peptide_min_length' value="4"/>
                        </div>
                    </div>
                    <div class="col s5">
                        <div class='input-field'>
                            <label for='peptide_max_length'>Maximum Length</label>
                            <input class='validate numeric-entry' type='number' min="0" id='peptide_max_length'
                                    name='peptide_max_length' value="60"/>
                        </div>
                    </div>
                </div>
            </div>
            <span class='message'></span>
            </div>
            <div class='col s2'>

            </div>
            <div class='col s6'>
                <div>
                    <h6>Glycan Definitions</h6>
                </div>
                <small>
                    List of glycan structures/compositions to attach to each protein.
                </small>
                <div class='input-field'>
                    <h6>
                        Select a Glycan Hypothesis or Sample Analysis
                    </h6>
                    <select id="glycan-database-source" name="glycan-database-source" class='browser-default'>
                        <option selected="true"></option>
                        <optgroup label="Glycan Hypotheses">
                        {% for hypothesis in manager.glycan_hypotheses(user) %}
                            <option value="Hypothesis,{{hypothesis.uuid}}">{{hypothesis.name}}</option>
                        {% endfor %}
                        </optgroup>
                    </select>
                </div>
                <div>Or</div>
                <div class="file-field input-field">
                    <h6>
                        Text File of Glycan Structures or Compositions
                    </h6>
                    <div class="btn">
                        <span>Select File...</span>
                        <input name='glycan-definition-file' id='glycan-definition-file' type="file" />
                    </div>
                    <input class="file-path validate" type="text" style="width: 67%;padding-left:5px;"/>
                    <br>
                </div>
            </div>
        </div>
        <div class='row'>
            <div class='col s3 tooltipped' data-position='top' data-tooltip="Be careful if using a large number glycans, as this can make the hypothesis intractably large.">
                <div>
                    <label for='max_glycosylation_sites' >Maximum Number of Glycosylations per Peptide</label>
                    <input class='validate numeric-entry' type='number' min="0" id='max_glycosylation_sites'
                           name='max_glycosylation_sites' value="1"/>
                </div>
            </div>
            <div class='col s3 tooltipped' data-position='top' data-tooltip="Generate a paired reverse protein decoy database instead of using a reverse peptide decoy database.">
                <div class='input-field'>
                    <input type="checkbox" id="generate-reverse-decoys" name="generate-reverse-decoys" />
                    <label for='generate-reverse-decoys'>Generate Reverse Decoys</label>
                </div>
            </div>
            <div class='col s3 tooltipped' data-position='top'
                data-tooltip="Generate a full cross product of peptides with glycans and store each candidate. Less efficient but does not require spectra to contain peptide+Y ions.">
                <div class='input-field'>
                    <input type="checkbox" id="generate-full-crossproduct" name="generate-full-crossproduct" checked />
                    <label for='generate-full-crossproduct'>Generate Full Crossproduct</label>
                </div>
            </div>
        </div>
        <div class='row'>
            <div class='col s4'>
                <button class='btn wave-effect'>
                    Generate
                </button>
                <div id='protein-file-upload-progress' class="progress" style='width: 135px;'>
                    <div class="determinate" style="width: 0%;"></div>
                </div>
            </div>
        </div>
    </form>
</div>
<script>
(function(){
$("#protein-list-file").on("change", function(event){
    if(this.files[0] === undefined){
        return
    }
    var file = this.files[0]
    identifyProteomicsFormat(file, function(format){
        if (format.format == ProteomicsFileFormats.mzIdentML) {
            if (format.version !== undefined) {
                let minor = format.version[1]
                if (minor === 0) {
                    format.format = ProteomicsFileFormats.error
                    format.version = undefined
                }
            }
        }
        $("#proteomics-file-type").val(format.format)
        updateFormatOptions(format, file)
    })
    var nameInput = $("#hypothesis_name")
    if(nameInput.val() == ""){
        nameInput.val(file.name)
    }
})

$(".advanced-enzyme-container-toggle").click(function(event){
        var handle = $(this)
        var symbolHandle = handle.find(".mdi")
        if(handle.attr('data-state') == 'open'){
            symbolHandle.removeClass("mdi-chevron-up")
            symbolHandle.addClass("mdi-chevron-down")
            $(".advanced-enzyme-container").hide()
            handle.attr('data-state', 'closed')
        } else {
            symbolHandle.removeClass("mdi-chevron-down")
            symbolHandle.addClass("mdi-chevron-up")
            $(".advanced-enzyme-container").show()
            handle.attr('data-state', 'open')
        }
    })

modificationSelectionEditor = makeModificationSelectionEditor(0, function(editor){
    editor.chooseConstant("Carbamidomethyl (C)")
})

$("#modification-selection-editor-container").append(modificationSelectionEditor.container)

materialTooltip()

mzIdentMLHandle = undefined;


function setProteinListErrorState(message) {
    if (message === "" || message === undefined || message === null) {
        var handle = $("#protein-list-file")
        handle[0].setCustomValidity("")
        handle = $("#protein-list-file-container input.file-path")
        handle[0].setCustomValidity("")
        handle.addClass("valid")
        handle.removeClass("invalid")
        $("#protein-list-file-container .btn").removeClass("red")
    } else {
        var handle = $("#protein-list-file")
        handle[0].setCustomValidity(message)
        handle = $("#protein-list-file-container input.file-path")
        handle[0].setCustomValidity(message)
        handle.addClass("invalid")
        handle.removeClass("valid")
        $("#protein-list-file-container .btn").addClass("red")
    }
}


function updateFormatOptions(format, file){
    console.log(format)
    //Clear existing error
    var handle = $("#protein-list-file")
    setProteinListErrorState(null)
    $("#mzid-protein-list-container").hide()
    if(mzIdentMLHandle !== undefined) {
        mzIdentMLHandle.clearContainer()
    }
    if(format.format === ProteomicsFileFormats.fasta){
        modificationSelectionEditor.show()

        handle = $("#enzyme-container")
        handle.find("select").removeAttr("disabled").css("cursor", "default")
        handle.find("input").removeAttr("disabled").css("cursor", "default")
        handle.find("h6").removeClass("grey-text")
        handle.find("span.message").text("")
        $("#mzid-protein-list-container").hide()
        mzIdentMLHandle = undefined

    }
    else if (format.format === ProteomicsFileFormats.mzIdentML) {
        modificationSelectionEditor.hide()

        handle = $("#enzyme-container")
        handle.find("select").attr("disabled", true).css("cursor", "not-allowed")
        handle.find("input").attr("disabled", true).css("cursor", "not-allowed")
        handle.find("h6").addClass("grey-text")
        handle.find("span.message").text("Informed Hypotheses do not need proteolytic enzyme rules")
        $("#mzid-protein-list-container").show()
        mzIdentMLHandle = new MzIdentMLProteinSelector(file, "#mzid-protein-list-container")
    }
    else if (format.format === ProteomicsFileFormats.error) {
        setProteinListErrorState("File Format Could Not Be Recognized")
        Materialize.toast("Protein List File Format Could Not Be Recognized")
    }
}

// selectModificationOption(
//     $("#constant-modifications-container").find("select")[0],
//     "Carbamidomethyl (C)").selected = true

ajaxForm($("form#glycopeptide-hypothesis-form"), function(){
    var currentAction = GlycReSoft.getShowingLayer()
    GlycReSoft.setShowingLayer("home-layer")
    currentAction.dispose()
}, function(err){
    console.log(arguments)
}, function(form){
    var formData = new FormData(form)
    if(mzIdentMLHandle !== undefined){
        var proteinChoices = mzIdentMLHandle.getChosenProteins()
        if(proteinChoices.length === 0){
            proteinChoices = mzIdentMLHandle.getAllProteins()
        }
        formData.append("protein_names", proteinChoices)
    }
    if(modificationSelectionEditor !== undefined){
        formData.append("constant_modifications", modificationSelectionEditor.getConstantModificationSpecs())
        formData.append("variable_modifications", modificationSelectionEditor.getVariableModificationSpecs())
        console.log(modificationSelectionEditor)
    }
    return formData
}, function(ev){
    var percent = ev.loaded / ev.total * 100.
    $("#protein-file-upload-progress .determinate").css("width", percent + '%')
})
materialFileInput()
})()
</script>
